    .section .text
    .global _start
_start:
    /* Step 1: Set up the stack pointer */
    la sp, stack_top              /* Load address of the top of the stack into SP */

    /* Step 2: Disable interrupts (optional) */
    li t0, 0x0                    /* Load 0 into t0 */
    csrs mie, t0                  /* Clear the interrupt enable bits in MIE register (disable interrupts) */

    /* Step 3: Clear the BSS section */
    la t0, _bss_start             /* Load the address of the BSS start */
    la t1, _bss_end               /* Load the address of the BSS end */
clear_bss:
    bge t0, t1, done_bss_clear    /* If t0 >= t1, BSS is cleared */
    sw zero, 0(t0)                /* Store zero at address pointed by t0 */
    addi t0, t0, 4                /* Increment t0 by 4 (word size) */
    j clear_bss                   /* Continue clearing BSS */
done_bss_clear:

    /* Step 4: Set the CPU to supervisor mode */
    #li t0, 0x1                    /* Supervisor mode bit mask */
    #csrs mstatus, t0              /* Set the S-mode bit in the mstatus register */

    /* Step 5: Jump to the kernel entry point `kmain` */
    la t0, kmain                  /* Load the address of `kmain` */
    jr t0                         /* Jump to `kmain` */

    /* End of bootloader */

    /* .bss section: Allocate space for uninitialized variables */
    .section .bss
_bss_start:
    .skip 0x1000                   /* Reserve 4KB for BSS (example size) */
_bss_end:

    /* .data section: Reserve space for the stack */
    .section .data
stack_top:
    .skip 0x1000                   /* Reserve 4KB for the stack (example size) */

